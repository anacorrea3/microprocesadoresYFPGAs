<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="1.0"/>
    <comp lib="0" loc="(790,210)" name="Splitter">
      <a name="fanout" val="7"/>
      <a name="incoming" val="7"/>
    </comp>
    <comp lib="0" loc="(80,170)" name="Clock"/>
    <comp lib="0" loc="(830,520)" name="Splitter">
      <a name="fanout" val="7"/>
      <a name="incoming" val="7"/>
    </comp>
    <comp lib="5" loc="(1030,230)" name="7-Segment Display"/>
    <comp lib="5" loc="(1050,460)" name="7-Segment Display"/>
    <comp lib="5" loc="(80,330)" name="Button"/>
    <comp loc="(260,580)" name="maquina_nueve">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(400,180)" name="contador">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(410,400)" name="contador">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(810,270)" name="bcd_display">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(810,410)" name="bcd_display">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <wire from="(1000,290)" to="(1000,390)"/>
    <wire from="(1000,390)" to="(1040,390)"/>
    <wire from="(1010,140)" to="(1010,230)"/>
    <wire from="(1010,230)" to="(1030,230)"/>
    <wire from="(1010,280)" to="(1010,290)"/>
    <wire from="(1010,290)" to="(1030,290)"/>
    <wire from="(1020,150)" to="(1020,220)"/>
    <wire from="(1020,220)" to="(1040,220)"/>
    <wire from="(1040,220)" to="(1040,230)"/>
    <wire from="(1040,290)" to="(1040,390)"/>
    <wire from="(1050,200)" to="(1050,230)"/>
    <wire from="(1050,290)" to="(1050,300)"/>
    <wire from="(1050,300)" to="(1080,300)"/>
    <wire from="(1050,450)" to="(1050,460)"/>
    <wire from="(1060,190)" to="(1060,230)"/>
    <wire from="(1060,430)" to="(1060,460)"/>
    <wire from="(1070,400)" to="(1070,460)"/>
    <wire from="(1070,460)" to="(1080,460)"/>
    <wire from="(1080,180)" to="(1080,300)"/>
    <wire from="(1080,420)" to="(1080,460)"/>
    <wire from="(140,200)" to="(140,330)"/>
    <wire from="(140,200)" to="(180,200)"/>
    <wire from="(140,330)" to="(140,370)"/>
    <wire from="(140,370)" to="(140,420)"/>
    <wire from="(140,420)" to="(190,420)"/>
    <wire from="(180,400)" to="(180,510)"/>
    <wire from="(180,400)" to="(190,400)"/>
    <wire from="(180,510)" to="(260,510)"/>
    <wire from="(20,370)" to="(140,370)"/>
    <wire from="(20,370)" to="(20,600)"/>
    <wire from="(20,600)" to="(40,600)"/>
    <wire from="(260,510)" to="(260,580)"/>
    <wire from="(30,620)" to="(30,670)"/>
    <wire from="(30,620)" to="(40,620)"/>
    <wire from="(30,670)" to="(460,670)"/>
    <wire from="(40,180)" to="(40,580)"/>
    <wire from="(40,180)" to="(60,180)"/>
    <wire from="(400,180)" to="(460,180)"/>
    <wire from="(410,400)" to="(590,400)"/>
    <wire from="(460,180)" to="(460,670)"/>
    <wire from="(460,180)" to="(590,180)"/>
    <wire from="(590,180)" to="(590,270)"/>
    <wire from="(590,400)" to="(590,410)"/>
    <wire from="(790,210)" to="(790,220)"/>
    <wire from="(790,220)" to="(840,220)"/>
    <wire from="(80,180)" to="(180,180)"/>
    <wire from="(80,320)" to="(80,330)"/>
    <wire from="(80,330)" to="(140,330)"/>
    <wire from="(810,140)" to="(1010,140)"/>
    <wire from="(810,150)" to="(1020,150)"/>
    <wire from="(810,160)" to="(890,160)"/>
    <wire from="(810,170)" to="(870,170)"/>
    <wire from="(810,180)" to="(1080,180)"/>
    <wire from="(810,190)" to="(1060,190)"/>
    <wire from="(810,200)" to="(1050,200)"/>
    <wire from="(810,270)" to="(840,270)"/>
    <wire from="(810,410)" to="(810,520)"/>
    <wire from="(810,520)" to="(830,520)"/>
    <wire from="(840,220)" to="(840,270)"/>
    <wire from="(850,450)" to="(1050,450)"/>
    <wire from="(850,460)" to="(900,460)"/>
    <wire from="(850,500)" to="(980,500)"/>
    <wire from="(850,510)" to="(890,510)"/>
    <wire from="(870,170)" to="(870,290)"/>
    <wire from="(870,290)" to="(1000,290)"/>
    <wire from="(890,160)" to="(890,280)"/>
    <wire from="(890,280)" to="(1010,280)"/>
    <wire from="(890,400)" to="(1070,400)"/>
    <wire from="(890,400)" to="(890,510)"/>
    <wire from="(900,430)" to="(1060,430)"/>
    <wire from="(900,430)" to="(900,460)"/>
    <wire from="(980,420)" to="(1080,420)"/>
    <wire from="(980,420)" to="(980,500)"/>
  </circuit>
  <vhdl name="contador">--------------------------------------------------------------------------------&#13;
-- Project :&#13; Sistema de conteo
-- File    :&#13;
-- Autor   :&#13;Gustavo A. Castrillón	
-- Date    :&#13;03/15/2023
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13; Vamos a hacer un sistema de conteo desde 0 hasta 9 puntos,por esto, necesitamos una cantidad de 4 bits  
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;

&#13;
ENTITY contador IS&#13;
  PORT (&#13;
  ------------------------------------------------------------------------------&#13;
  --Insert input ports below&#13;
    clock      : IN  std_logic;                    -- input bit example&#13;
    --Nreset 	: IN  std_logic; --Es comun que todo sistema que empiece con N es una logica negada. 
    --NOTA: Consume menos potencia el bajar una señal a cero que subirla a 1. 
    reset 	: IN  std_logic; 
    output	: OUT std_logic_vector(3 downto 0)
    );&#13;
END contador;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF contador IS&#13;
&#13;	signal cuenta : std_logic_vector(3 downto 0); 
BEGIN&#13;
process(clock,reset)
begin
	if reset = '1' then
		cuenta &lt;= "0000"; 
	--rising_edge es un flanco de subida luego no hay que colocar 
	--elsif clock = '1' and clock'event then 
	elsif rising_edge(clock) then
		if cuenta&gt;="1001" then
			cuenta&lt;="0000"; 
		else
			cuenta&lt;= cuenta + 1; 
		end if; 
	end if;
end process; 	
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="bcd_display">--------------------------------------------------------------------------------&#13;
-- Project :&#13;Display el cual me mostrara en un pantalla los numeros contados 
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY bcd_display IS&#13;
  PORT (&#13;
  	entrada_binaria 	: IN 	std_logic_vector(3 downto 0); 
  	salida_display 	: OUT 	std_logic_vector(6 downto 0)
    );&#13;
END bcd_display;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF bcd_display IS&#13;
&#13;
BEGIN&#13;
salida_display &lt;= "1111110" when entrada_display = "0000" else
			   "0110000" when entrada_display = "0001" else
			   "1101101" when entrada_display = "0010" else
			   "1111001" when entrada_display = "0011" else
			   "0110011" when entrada_display = "0100" else
			   "1011011" when entrada_display = "0101" else
			   "0011111" when entrada_display = "0110" else
			   "1110000" when entrada_display = "0111" else
			   "1111111" when entrada_display = "1000" else
			   "1110011" when entrada_display = "1001" else
			   "0000000";
			   
&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="maquina_nueve">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY maquina_nueve IS&#13;
  PORT (&#13;
  ------------------------------------------------------------------------------&#13;
  --Insert input ports below&#13;
    clock_in      : IN  std_logic;                    -- input bit example&#13;
    clock_out 	: OUT std_logic; 
    reset 	: IN	 std_logic; 
    entrada_cuenta	: IN std_logic_vector(3 downto 0) --output vector example
    );&#13;
END maquina_nueve;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF maquina_nueve IS&#13;
&#13;type estados_cuenta is (s0,s1); 
signal estados : estados_cuenta; 

BEGIN&#13;
&#13;
process(clock_in, reset) 
begin 	
--Es importante a la hora de instanciar considerar el mismo reset par todos los datos. 
	if reset = '1' then 
		clock_out &lt;= '0'; 
		estados &lt;= s0; 
	elsif rising_edge(clock_in) then 
		case estados is
		when s0 =&gt;
			clock_out &lt;= '0'; 
			if entrada_cuenta &gt;= "1001" then 
				estados &lt;= s1; 
			end if; 
		when s1 =&gt; 
			if entrada_cuenta &gt;="0000" then 
				estados &lt;=s0;  
				clock_out &lt;= '1'; 
			end if; 
		when others =&gt;
			clock_out&lt;='0'; 
			estados &lt;= s0; 
		end case; 
	end if; 
end process; 	
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="displays_2">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY displays_2 IS&#13;
  PORT (&#13;
  ------------------------------------------------------------------------------&#13;
  --Insert input ports below&#13;
    clock2      : IN  std_logic;                    -- input bit example&#13;
    reset		: IN  std_logic; 

    display_1 	: OUT std_logic_vector(6 downto 0); 
    display_2 	: OUT std_logic_vector(6 downto 0); 
    );&#13;
END displays_2;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;--Instanciado de los elementos generados 
ARCHITECTURE TypeArchitecture OF displays_2 IS&#13;

component contador IS
  PORT (
  ------------------------------------------------------------------------------
  --Insert input ports below
    clock      : IN  std_logic;                    -- input bit example
    --Nreset 	: IN  std_logic; --Es comun que todo sistema que empiece con N es una logica negada. 
    --NOTA: Consume menos potencia el bajar una señal a cero que subirla a 1. 
    reset 	: IN  std_logic; 
    output	: OUT std_logic_vector(3 downto 0)
    );
END component;&#13;

component bcd_display IS
  PORT (
  	entrada_binaria 	: IN 	std_logic_vector(3 downto 0); 
  	salida_display 	: OUT 	std_logic_vector(6 downto 0)
    );
END component;

component maquina_nueve IS
  PORT (
  ------------------------------------------------------------------------------
  --Insert input ports below
    clock_in      : IN  std_logic;                    -- input bit example
    clock_out 	: OUT std_logic; 
    reset 	: IN	 std_logic; 
    entrada_cuenta	: IN std_logic_vector(3 downto 0) --output vector example
    );
END component;

signal bcd_1 : std_logic_vector(3 downto 0); 
signal bcd_2 : std_logic_vector(3 downto 0); 
signal display_int : std_logic_vector(6 downto 0); 
signal clk_int : std_logic
BEGIN&#13;
--union de las señales dentro de la fpga
cuenta1: contador
  PORT map (
  ------------------------------------------------------------------------------
  --Insert input ports below
    clock   =&gt; clock2, 
    reset =&gt; reset,
    output =&gt; bdc_1
    --también puedo escribirlo de la forma: 
    --clock2,
    --reset,
    --bdc_1
    --Pero esto puede hacer que uno se pierda en el texto. 
    ); 
disp_1 : bcd_display 
  PORT map(
  	entrada_binaria =&gt; bcd_1, 
  	salida_display =&gt; display_int
    );
    
mq9: maquina_nueve 
  PORT map(
  ------------------------------------------------------------------------------
  --Insert input ports below
    clock_in   =&gt; clock2,   
    clock_out  =&gt; clk_int,
    reset 	 =&gt; reset,
    entrada_cuenta	=&gt; display_1
    );
    
&#13;cuenta2: contador
  PORT map (
  ------------------------------------------------------------------------------
  --Insert input ports below
    clock   =&gt; clk_int, 
    reset =&gt; reset,
    output =&gt; bdc_2
    --también puedo escribirlo de la forma: 
    --clock2,
    --reset,
    --bdc_1
    --Pero esto puede hacer que uno se pierda en el texto. 
    ); 
disp_2 : bcd_display 
  PORT map(
  	entrada_binaria =&gt; bcd_2, 
  	salida_display =&gt; display_2
    );
&#13;
END TypeArchitecture;&#13;
</vhdl>
</project>
